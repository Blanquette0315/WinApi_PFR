#include "pch.h"
#include "CBattleMgr.h"

#include "CPokemon.h"
#include "CSkill.h"
#include "CUI.h"

CBattleMgr::CBattleMgr()
	: m_TypeMatrix{
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NON, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NON, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::GREAT, EFFECT_TYPE::NON, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::GREAT},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NON},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NON, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NON, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NON, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK},
		{EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::WEEK, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::GREAT, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::NORMAL, EFFECT_TYPE::WEEK}
		}
	, m_pPlayerPokemon(nullptr)
	, m_pTargetPokemon(nullptr)
	, m_eBattleType(BATTLE_TYPE::NONE)
{
}

CBattleMgr::~CBattleMgr()
{
}

void CBattleMgr::init()
{

}

float CBattleMgr::CompareType(POKEMON_TYPE _SkillType, POKEMON_TYPE _Target)
{
	if (!(_Target == POKEMON_TYPE::NONE))
	{
		EFFECT_TYPE Result = m_TypeMatrix[(UINT)_SkillType][(UINT)_Target];
		if (Result == EFFECT_TYPE::GREAT)
		{
			return 2.0;
		}
		else if (Result == EFFECT_TYPE::NORMAL)
		{
			return 1.0f;
		}
		else if (Result == EFFECT_TYPE::WEEK)
		{
			return 0.5f;
		}
		else if (Result == EFFECT_TYPE::NON)
		{
			return 0.0f;
		}
	}
	else
	{
		return 1.0;
	}
}

void CBattleMgr::PlayerPokemoninit(CPokemon* _obj)
{
	m_arrPlayerPokemon.push_back(_obj);
}

void CBattleMgr::BattleMgrEixt()
{
	int size = m_arrPlayerPokemon.size();

	for (int i = 0; i < size; ++i)
	{
		m_arrPlayerPokemon.erase(m_arrPlayerPokemon.begin());
	}
}

CPokemon* CBattleMgr::GetVecPokemon(UINT _index)
{
	 return m_arrPlayerPokemon[_index];
}

void CBattleMgr::ShiftPokemon(UINT _index)
{
	CPokemon* temPrevPokemon = m_arrPlayerPokemon[0];
	m_arrPlayerPokemon[0] = m_arrPlayerPokemon[_index];
	m_arrPlayerPokemon[_index] = temPrevPokemon;
	m_pPlayerPokemon = m_arrPlayerPokemon[0];
}

bool CBattleMgr::IS_Player_First()
{
	if(m_pPlayerPokemon->GetSpeed() >= m_pTargetPokemon->GetSpeed())
		return true;
	else if (m_pPlayerPokemon->GetSpeed() < m_pTargetPokemon->GetSpeed())
		return false;
}

void CBattleMgr::Act(UINT _skindex)
{
	if (IS_Player_First())
	{
		SetBattle_Type(BATTLE_TYPE::PLAYERUSESKILL);
	}
	else
	{
		SetBattle_Type(BATTLE_TYPE::OTHERTURN);
		OtherAct();
	}
	
	CSkill* TemSkill = nullptr;
	TemSkill = m_pPlayerPokemon->GetSkill(_skindex);
	m_pPlayerPokemon->SetTargetSkill(TemSkill);

}

void CBattleMgr::ActSkill()
{
	SetBattle_Type(BATTLE_TYPE::PALYERCALDMG);

	CSkill* TemSkill = m_pPlayerPokemon->GetTargetSkill();
	TemSkill->SkillAct();

	float ComType1 = CompareType(TemSkill->GetSkillType(), m_pTargetPokemon->GetPokeType1());
	float ComType2 = CompareType(TemSkill->GetSkillType(), m_pTargetPokemon->GetPokeType2());

	UINT DMG = m_pPlayerPokemon->Attack(TemSkill->GetPower(), TemSkill->GetSkillType(), TemSkill->GetAType()
		, m_pTargetPokemon->GetDefence(), m_pTargetPokemon->GetSDefence(), ComType1, ComType2);
	m_pTargetPokemon->Hit(DMG);
}

void CBattleMgr::OtherAct()
{
	CSkill* TemSkill = nullptr;
	TemSkill = m_pTargetPokemon->GetRandSkill();
	m_pTargetPokemon->SetTargetSkill(TemSkill);

}

void CBattleMgr::OtherActSkill()
{
	SetBattle_Type(BATTLE_TYPE::OTHERCALDMG);

	CSkill* TemSkill = m_pTargetPokemon->GetTargetSkill();
	TemSkill->SkillAct();

	float ComType1 = CompareType(TemSkill->GetSkillType(), m_pPlayerPokemon->GetPokeType1());
	float ComType2 = CompareType(TemSkill->GetSkillType(), m_pPlayerPokemon->GetPokeType2());

	UINT DMG = m_pTargetPokemon->Attack(TemSkill->GetPower(), TemSkill->GetSkillType(), TemSkill->GetAType()
		, m_pPlayerPokemon->GetDefence(), m_pPlayerPokemon->GetSDefence(), ComType1, ComType2);
	m_pPlayerPokemon->Hit(DMG);
}

void CBattleMgr::Run()
{
	SetBattle_Type(BATTLE_TYPE::RUN);
}

void CBattleMgr::SetRunRand()
{
	srand(time(NULL));
	m_iRunRand = rand() % 11;
}
